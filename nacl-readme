TOC

This document has two main sections:

    Using Qt for Google Native Client
    Developing Qt for Google Native Client

If you want to use Qt then the first one most relevant. The second
section goes into details.

* Using Qt for Google Native Client

The Native Client SDK provides several toolchains. Qt for NaCl provides configure and build
scripts that makes dealing with them easier:

nacl-configure      : configure Qt for a single toolchain
nacl-configure-all  : configure Qt for all toolchains
nacl-build-all      : build supported parts of Qt for all toolchains.

Using the scripts is optional - it's also possible to build Qt using plain 
configure and make.

Build Qt:

Install the Native Cleint SDK and setting NACL_SDK_ROOT:
    export NACL_SDK_ROOT=/Users/USER/code/nacl_sdk/pepper_35

A) Building Qt for a single toolchain using nacl-configure in QtBase:

1) Select the toolchain and configure Qt. Use shadow builds (CWD is the build dir)
   /path/to/nacl-configure <toolchain> [release|debug]

   <toolchain> is one of:
        nacl-arm-newlib-g++
        nacl-x86-glibc-g++
        nacl-x86-glibc-g++64
        nacl-x86-newlib-g++
        pnacl-newlib-clang

   (nacl-configure calls Qt's configure; the final command line with configure options is 
    printed to the terminal for reference)

2) Build:
   "make"
   
B) Building Qt for all toolchains using nacl-configure-all in QtBase:

(cwd is the build dir)

1) /path/to/nacl-configure-all
   You should now have the following build directories:
       release/mac_arm_newlib
       release/mac_pnacl
       release/mac_x86_glibc
       release/mac_x86_newlib
       debug/mac_arm_newlib
       debug/mac_pnacl
       debug/mac_x86_glibc
       debug/mac_x86_newlib

2) /path/to/nacl-build-all
    Builds each configuration. Now is a good time to get coffe.

Running Examples:
    NOTE: The standard examples and demos have not had app startup ported and won't run
          out of the box. See "App Porting Notes" below.

    There's a series of basic examples in qtbase/tests/manual/nacl:
        window_raster
        window_opengl
        window_quick

    From each direcory, build, then run ../../../../bin/nacldeployqt to deploy the
    example and launch a server.

App Porting Notes:
    * App startup: Use QT_GUI_MAIN instead of defining main:
        QT_GUI_MAIN(app_init_function, app_exit_function)
      See for example qtbase/tests/manual/nacl/window_raster

* Developing Qt for Google Native Client

Standard output goes to Chrome standard out. Lauch Chrome from the command line:

NACL_DEBUG_ENABLE=1 PPAPI_BROWSER_DEBUG=1 NACL_PLUGIN_DEBUG=1 /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --incognito --disable-cache --no-default-browser-check --vmodule=ppb*=4 --enable-logging=stderr  --new-window "http://localhost:8000"


Qt bootstrapping / tests

In qtbase/tests/manual/nacl. qtnacl.pro


Debugging:

1) Run Chrome in debug mode:

    /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --enable-nacl-debug --no-sandbox

2) Attach debugger: [TODO successfully load debug symbols.]

    ~/code/nacl_sdk/pepper_35/toolchain/mac_x86_glibc/bin/x86_64-nacl-gdb
   target remote localhost:4014
   nacl-manifest wiggly.nmf
   remote get irt /Applications/Google\ Chrome.app/Contents/Versions/36.0.1985.125/Google\ Chrome\ Framework.framework/Internet\ Plug-Ins/nacl_irt_x86_32.nexe
   nacl-irt /Applications/Google\ Chrome.app/Contents/Versions/36.0.1985.125/Google\ Chrome\ Framework.framework/Internet\ Plug-Ins/nacl_irt_x86_32.nexe

   NACL_DEBUG_ENABLE=1 PPAPI_BROWSER_DEBUG=1 NACL_PLUGIN_DEBUG=1 /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --vmodule=ppb*=4 --enable-logging=stderr   

