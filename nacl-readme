The mostly pain-free introduction to Qt for Google Native Client

The Native Client SDK provides several toolchains. Qt for NaCl provides nacl-configure
for configuring Qt for one of them:
    nacl-configure <toolcain> [release|debug]

Available toolchains are:
    mac_arm_newlib
    mac_pnacl
    mac_x86_glibc
    mac_x86_newlib

Linux systems have corresponding "linux_"-prefixed toolchains. Windows is not supported
as a host platform.

Which toolchain should I use?
    * pnacl is the "deployment" toolchain which produces .pexes which runs in most Chrome
      Chrome browser (Android and iOS Chrome are not supported)
    * x86_newlib is a good choice for development since it avoids the run-time pnacl to
      native code translation step which gives faster build-debug cycles. x86_newlib use
      requires enabling Native Client in Chrome's about:flags settings.

The fine print: The glibc toolchain(s) are not currently supported. x86_newlib has 32/64
bit variants; the nacl-configure script currently builds 32-bit only, which excludes some
64-bit platforms as targets. (The pnacl builds have no such restrictions). Both *newlib and
pnacl produces static binaries (glibc produces shared libraries).

NaCl Toolchain versions: Qt should build using any recent NaCl toolchain. The current
version in use as of writing is pepper_39. Set NACL_SDK_ROOT:
    export NACL_SDK_ROOT=/Users/USER/code/nacl_sdk/pepper_39

Release and debug builds: Debug binaries are large (~50MB for QtGui). This combined with
static linking make debug builds impractical due to the increased link and load time.

Building Qt:
    export NACL_SDK_ROOT=/Users/USER/code/nacl_sdk/pepper_39
    /path/to/nacl-configure mac_x86_newlib release
    make module-qtdeclarative
    make module-qtquickcontrols

    [the "make" calls above should succeed]

Building applications with Qt for NaCl:

This has a couple of moving parts. We'll start by building the provided examples, staying
on the beaten path:

Prerequesites:
    * All relevant Qt dependencies must be built. The current dev effort focuses on
      Qt Quick (including Qt Quick Controls) and its direct dependencies. nacl-configure
      is the canonical way to build Qt - it defoines the required configurte options and
      anything disabled in that script is not supported.
    * In particular QtWidgets is not well tested.
    * The app itself must be ported to use Q_GUI_MAIN instead of defining main().
      (this is relativly straightforward, see the examples)

Then:
    * build with the standard qmake + make
    * deploy with nacldeployqt

qtbase/tests/manual/nacl contains a set of ported known good examples,
including window_raster, window_opengl, window_qtquick, and window_controls_gallery.

Buidling the provided examples:
    path/to/qtbase/bin/qmake -r path/to/qtbase/tests/manual/nacl
    make
Running a provided example:
    cd window_controls_gallery
    /path/to/nacldeployqt --run --template windowed --quick

nacldeployqt in depth:
    Due to a quirk in the current implementation, always run nacldeployqt with a
    complete path: ../../bin/nacldeployqt.

nacldeployqt performs the following steps:

- Deploys Qt Quick Imports. Currenly deploys all imports installed into qbase/qml.
  May run qmlimportscanner in the future. Enabled with the "quick" option:
      --quick
- pnacl: "finalize" step. Converts from llvm intemediate to pnacl stable bitcode.
  This is done automatically for all pnacl builds.
- Creates the .nmf manifest file
- Creates supporting html and javascript. Generates simple html and javascript
  loader/support code. Controllable with the "template" option:
      --template windowed
      --template fullscreen
- Optionally starts a webserver and Chrome and load the application:
      --run
      --debug
   When debugging chrome will start and wait for the debugger. Run "attach" on
   on the gdb command line when both are ready:
       (gdb) attach localhost:4014

Run-time behavior and options:
    - pnacl translation delay: There is a ~10-30s delay the first time a pnacl executable
      is loaded. The loading screen is a blank white screen with no progress indicator.
    - qmldir loading: Qt Quick looks for qmldir files using a standard search pattern,
      first QtQuick.2.2/qmldir, then QtQuick.2/qmldir, then QtQuick/qmldir. This generates
      several 404 error messages on the Javascript and terminal console. This is normal.
    - Console output (qDebug() etc): nacldeployqt starts Chrome with the sandbox disabled,
      debug output will go to the terminal. The Qt/pepper platform plugin logs on the
      "qt.platform.pepper" logging category.
    - Envirnment variables: Variables can be set in the url query string (when using the
      nacldeploqt-generated html and javascrpt):
          http://localhost:8000/index.html?QT_LOGGING_RULES=qt.platform.pepper.*=true
          http://localhost:8000/index.html?QSG_VISUALIZE=overdraw
